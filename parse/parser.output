Grammar

    0 $accept: Start $end

    1 Start: F FUNC_
    2      | /* empty */

    3 FUNC_: F FUNC_
    4      | /* empty */

    5 F: FUNCTION IDENTIFIER LEFTPAREN P_L RIGHTPAREN COLON R_T LEFTBRACE B_O_F RIGHTBRACE

    6 P_L: IDENTIFIER COLON TYPE MORE_PARAMS
    7    | /* empty */

    8 MORE_PARAMS: COMMA P_L
    9            | /* empty */

   10 TYPE: INT
   11     | BOOL

   12 INT_ARRAY: INTARRAY LEFTBRACKET INTEGER RIGHTBRACKET

   13 R_T: TYPE

   14 B_O_F: VAR_DECLERATIONS BODY_CHOICE RETURN_

   15 BODY_CHOICE: F BODY_STATEMENTS
   16            | BODY_STATEMENTS

   17 BODY_STATEMENTS: STATEMENTS_ BODY_STATEMENTS
   18                | /* empty */

   19 VAR_DECLERATIONS: VAR IDENTIFIER MULT_DEC COLON TYPE SEMICOLON
   20                 | /* empty */

   21 MULT_DEC: COMMA IDENTIFIER MULT_DEC
   22         | COMMA INT_ARRAY MULT_DEC
   23         | /* empty */

   24 STATEMENTS_: ASIGN_MENT SEMICOLON
   25            | FUNCTION_CALL SEMICOLON
   26            | IF_
   27            | IF_ELSE
   28            | FOR_

   29 RETURN_: RETURN EXPR_ESSION SEMICOLON

   30 IF_: IF LEFTPAREN EXPR_ESSION RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE

   31 IF_ELSE: IF_ ELSE LEFTBRACE STATEMENTS_ RIGHTBRACE

   32 FOR_: FOR LEFTPAREN FOR_PARAMS RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE

   33 FOR_PARAMS: FOR_ASIGN LEFTPAREN EXPR_ESSION RIGHTPAREN FOR_ASIGN

   34 FOR_ASIGN: ASIGN_MENT
   35          | /* empty */

   36 ASIGN_MENT: IDENTIFIER ASSIGNMENT EXPR_ESSION
   37           | INT_ARRAY ASSIGNMENT EXPR_ESSION

   38 EXPR_ESSION: MULT_EXPRESSION
   39            | LEFTPAREN MULT_EXPRESSION RIGHTPAREN

   40 SINGLE_EXPRESSION: MINUS INTEGER
   41                  | ABSOLUTEVALUE MINUS INTEGER ABSOLUTEVALUE
   42                  | INTEGER
   43                  | ABSOLUTEVALUE INTEGER ABSOLUTEVALUE
   44                  | TRUE
   45                  | NOT TRUE
   46                  | FALSE
   47                  | NOT FALSE
   48                  | IDENTIFIER
   49                  | ABSOLUTEVALUE IDENTIFIER ABSOLUTEVALUE
   50                  | INT_ARRAY
   51                  | ABSOLUTEVALUE INT_ARRAY ABSOLUTEVALUE

   52 INT_ARRAY: IDENTIFIER LEFTBRACKET INTEGER RIGHTBRACKET

   53 MULT_EXPRESSION: SINGLE_EXPRESSION OPE_RATOR

   54 OPE_RATOR: /* empty */
   55          | PLUS EXPR_ESSION
   56          | MINUS EXPR_ESSION
   57          | TIMES EXPR_ESSION
   58          | DIVIDE EXPR_ESSION
   59          | OROR EXPR_ESSION
   60          | ANDAND EXPR_ESSION
   61          | EQEQ EXPR_ESSION
   62          | GT EXPR_ESSION
   63          | GTE EXPR_ESSION
   64          | LT EXPR_ESSION
   65          | LTE EXPR_ESSION
   66          | NE EXPR_ESSION

   67 FUNCTION_CALL: IDENTIFIER ASSIGNMENT IDENTIFIER LEFTPAREN IN_PARAMS RIGHTPAREN
   68              | INT_ARRAY ASSIGNMENT IDENTIFIER LEFTPAREN IN_PARAMS RIGHTPAREN

   69 IN_PARAMS: MINUS INTEGER NEXT_PARAM
   70          | INTEGER NEXT_PARAM
   71          | TRUE NEXT_PARAM
   72          | NOT TRUE NEXT_PARAM
   73          | FALSE NEXT_PARAM
   74          | NOT FALSE NEXT_PARAM
   75          | NEXT_PARAM

   76 NEXT_PARAM: COMMA IN_PARAMS
   77           | /* empty */


Terminals, with rules where they appear

$end (0) 0
error (256)
BOOL (258) 11
ELSE (259) 31
IF (260) 30
INT (261) 10
FOR (262) 32
VAR (263) 19
FUNCTION (264) 5
INTARRAY (265) 12
RETURN (266) 29
EQEQ (267) 61
GT (268) 62
GTE (269) 63
LT (270) 64
LTE (271) 65
NE (272) 66
ANDAND (273) 60
OROR (274) 59
NOT (275) 45 47 72 74
PLUS (276) 55
MINUS (277) 40 41 56 69
TIMES (278) 57
DIVIDE (279) 58
TRUE (280) 44 45 71 72
FALSE (281) 46 47 73 74
IDENTIFIER (282) 5 6 19 21 36 48 49 52 67 68
INTEGER (283) 12 40 41 42 43 52 69 70
SEMICOLON (284) 19 24 25 29
COLON (285) 5 6 19
COMMA (286) 8 21 22 76
ABSOLUTEVALUE (287) 41 43 49 51
LEFTBRACE (288) 5 30 31 32
RIGHTBRACE (289) 5 30 31 32
LEFTPAREN (290) 5 30 32 33 39 67 68
RIGHTPAREN (291) 5 30 32 33 39 67 68
LEFTBRACKET (292) 12 52
RIGHTBRACKET (293) 12 52
ASSIGNMENT (294) 36 37 67 68


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
Start (41)
    on left: 1 2, on right: 0
FUNC_ (42)
    on left: 3 4, on right: 1 3
F (43)
    on left: 5, on right: 1 3 15
P_L (44)
    on left: 6 7, on right: 5 8
MORE_PARAMS (45)
    on left: 8 9, on right: 6
TYPE (46)
    on left: 10 11, on right: 6 13 19
INT_ARRAY (47)
    on left: 12 52, on right: 22 37 50 51 68
R_T (48)
    on left: 13, on right: 5
B_O_F (49)
    on left: 14, on right: 5
BODY_CHOICE (50)
    on left: 15 16, on right: 14
BODY_STATEMENTS (51)
    on left: 17 18, on right: 15 16 17
VAR_DECLERATIONS (52)
    on left: 19 20, on right: 14
MULT_DEC (53)
    on left: 21 22 23, on right: 19 21 22
STATEMENTS_ (54)
    on left: 24 25 26 27 28, on right: 17 30 31 32
RETURN_ (55)
    on left: 29, on right: 14
IF_ (56)
    on left: 30, on right: 26 31
IF_ELSE (57)
    on left: 31, on right: 27
FOR_ (58)
    on left: 32, on right: 28
FOR_PARAMS (59)
    on left: 33, on right: 32
FOR_ASIGN (60)
    on left: 34 35, on right: 33
ASIGN_MENT (61)
    on left: 36 37, on right: 24 34
EXPR_ESSION (62)
    on left: 38 39, on right: 29 30 33 36 37 55 56 57 58 59 60 61 62
    63 64 65 66
SINGLE_EXPRESSION (63)
    on left: 40 41 42 43 44 45 46 47 48 49 50 51, on right: 53
MULT_EXPRESSION (64)
    on left: 53, on right: 38 39
OPE_RATOR (65)
    on left: 54 55 56 57 58 59 60 61 62 63 64 65 66, on right: 53
FUNCTION_CALL (66)
    on left: 67 68, on right: 25
IN_PARAMS (67)
    on left: 69 70 71 72 73 74 75, on right: 67 68 76
NEXT_PARAM (68)
    on left: 76 77, on right: 69 70 71 72 73 74 75


state 0

    0 $accept: . Start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 2 (Start)

    Start  go to state 2
    F      go to state 3


state 1

    5 F: FUNCTION . IDENTIFIER LEFTPAREN P_L RIGHTPAREN COLON R_T LEFTBRACE B_O_F RIGHTBRACE

    IDENTIFIER  shift, and go to state 4


state 2

    0 $accept: Start . $end

    $end  shift, and go to state 5


state 3

    1 Start: F . FUNC_

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 4 (FUNC_)

    FUNC_  go to state 6
    F      go to state 7


state 4

    5 F: FUNCTION IDENTIFIER . LEFTPAREN P_L RIGHTPAREN COLON R_T LEFTBRACE B_O_F RIGHTBRACE

    LEFTPAREN  shift, and go to state 8


state 5

    0 $accept: Start $end .

    $default  accept


state 6

    1 Start: F FUNC_ .

    $default  reduce using rule 1 (Start)


state 7

    3 FUNC_: F . FUNC_

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 4 (FUNC_)

    FUNC_  go to state 9
    F      go to state 7


state 8

    5 F: FUNCTION IDENTIFIER LEFTPAREN . P_L RIGHTPAREN COLON R_T LEFTBRACE B_O_F RIGHTBRACE

    IDENTIFIER  shift, and go to state 10

    $default  reduce using rule 7 (P_L)

    P_L  go to state 11


state 9

    3 FUNC_: F FUNC_ .

    $default  reduce using rule 3 (FUNC_)


state 10

    6 P_L: IDENTIFIER . COLON TYPE MORE_PARAMS

    COLON  shift, and go to state 12


state 11

    5 F: FUNCTION IDENTIFIER LEFTPAREN P_L . RIGHTPAREN COLON R_T LEFTBRACE B_O_F RIGHTBRACE

    RIGHTPAREN  shift, and go to state 13


state 12

    6 P_L: IDENTIFIER COLON . TYPE MORE_PARAMS

    BOOL  shift, and go to state 14
    INT   shift, and go to state 15

    TYPE  go to state 16


state 13

    5 F: FUNCTION IDENTIFIER LEFTPAREN P_L RIGHTPAREN . COLON R_T LEFTBRACE B_O_F RIGHTBRACE

    COLON  shift, and go to state 17


state 14

   11 TYPE: BOOL .

    $default  reduce using rule 11 (TYPE)


state 15

   10 TYPE: INT .

    $default  reduce using rule 10 (TYPE)


state 16

    6 P_L: IDENTIFIER COLON TYPE . MORE_PARAMS

    COMMA  shift, and go to state 18

    $default  reduce using rule 9 (MORE_PARAMS)

    MORE_PARAMS  go to state 19


state 17

    5 F: FUNCTION IDENTIFIER LEFTPAREN P_L RIGHTPAREN COLON . R_T LEFTBRACE B_O_F RIGHTBRACE

    BOOL  shift, and go to state 14
    INT   shift, and go to state 15

    TYPE  go to state 20
    R_T   go to state 21


state 18

    8 MORE_PARAMS: COMMA . P_L

    IDENTIFIER  shift, and go to state 10

    $default  reduce using rule 7 (P_L)

    P_L  go to state 22


state 19

    6 P_L: IDENTIFIER COLON TYPE MORE_PARAMS .

    $default  reduce using rule 6 (P_L)


state 20

   13 R_T: TYPE .

    $default  reduce using rule 13 (R_T)


state 21

    5 F: FUNCTION IDENTIFIER LEFTPAREN P_L RIGHTPAREN COLON R_T . LEFTBRACE B_O_F RIGHTBRACE

    LEFTBRACE  shift, and go to state 23


state 22

    8 MORE_PARAMS: COMMA P_L .

    $default  reduce using rule 8 (MORE_PARAMS)


state 23

    5 F: FUNCTION IDENTIFIER LEFTPAREN P_L RIGHTPAREN COLON R_T LEFTBRACE . B_O_F RIGHTBRACE

    VAR  shift, and go to state 24

    $default  reduce using rule 20 (VAR_DECLERATIONS)

    B_O_F             go to state 25
    VAR_DECLERATIONS  go to state 26


state 24

   19 VAR_DECLERATIONS: VAR . IDENTIFIER MULT_DEC COLON TYPE SEMICOLON

    IDENTIFIER  shift, and go to state 27


state 25

    5 F: FUNCTION IDENTIFIER LEFTPAREN P_L RIGHTPAREN COLON R_T LEFTBRACE B_O_F . RIGHTBRACE

    RIGHTBRACE  shift, and go to state 28


state 26

   14 B_O_F: VAR_DECLERATIONS . BODY_CHOICE RETURN_

    IF          shift, and go to state 29
    FOR         shift, and go to state 30
    FUNCTION    shift, and go to state 1
    INTARRAY    shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 18 (BODY_STATEMENTS)

    F                go to state 33
    INT_ARRAY        go to state 34
    BODY_CHOICE      go to state 35
    BODY_STATEMENTS  go to state 36
    STATEMENTS_      go to state 37
    IF_              go to state 38
    IF_ELSE          go to state 39
    FOR_             go to state 40
    ASIGN_MENT       go to state 41
    FUNCTION_CALL    go to state 42


state 27

   19 VAR_DECLERATIONS: VAR IDENTIFIER . MULT_DEC COLON TYPE SEMICOLON

    COMMA  shift, and go to state 43

    $default  reduce using rule 23 (MULT_DEC)

    MULT_DEC  go to state 44


state 28

    5 F: FUNCTION IDENTIFIER LEFTPAREN P_L RIGHTPAREN COLON R_T LEFTBRACE B_O_F RIGHTBRACE .

    $default  reduce using rule 5 (F)


state 29

   30 IF_: IF . LEFTPAREN EXPR_ESSION RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE

    LEFTPAREN  shift, and go to state 45


state 30

   32 FOR_: FOR . LEFTPAREN FOR_PARAMS RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE

    LEFTPAREN  shift, and go to state 46


state 31

   12 INT_ARRAY: INTARRAY . LEFTBRACKET INTEGER RIGHTBRACKET

    LEFTBRACKET  shift, and go to state 47


state 32

   36 ASIGN_MENT: IDENTIFIER . ASSIGNMENT EXPR_ESSION
   52 INT_ARRAY: IDENTIFIER . LEFTBRACKET INTEGER RIGHTBRACKET
   67 FUNCTION_CALL: IDENTIFIER . ASSIGNMENT IDENTIFIER LEFTPAREN IN_PARAMS RIGHTPAREN

    LEFTBRACKET  shift, and go to state 48
    ASSIGNMENT   shift, and go to state 49


state 33

   15 BODY_CHOICE: F . BODY_STATEMENTS

    IF          shift, and go to state 29
    FOR         shift, and go to state 30
    INTARRAY    shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 18 (BODY_STATEMENTS)

    INT_ARRAY        go to state 34
    BODY_STATEMENTS  go to state 50
    STATEMENTS_      go to state 37
    IF_              go to state 38
    IF_ELSE          go to state 39
    FOR_             go to state 40
    ASIGN_MENT       go to state 41
    FUNCTION_CALL    go to state 42


state 34

   37 ASIGN_MENT: INT_ARRAY . ASSIGNMENT EXPR_ESSION
   68 FUNCTION_CALL: INT_ARRAY . ASSIGNMENT IDENTIFIER LEFTPAREN IN_PARAMS RIGHTPAREN

    ASSIGNMENT  shift, and go to state 51


state 35

   14 B_O_F: VAR_DECLERATIONS BODY_CHOICE . RETURN_

    RETURN  shift, and go to state 52

    RETURN_  go to state 53


state 36

   16 BODY_CHOICE: BODY_STATEMENTS .

    $default  reduce using rule 16 (BODY_CHOICE)


state 37

   17 BODY_STATEMENTS: STATEMENTS_ . BODY_STATEMENTS

    IF          shift, and go to state 29
    FOR         shift, and go to state 30
    INTARRAY    shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 18 (BODY_STATEMENTS)

    INT_ARRAY        go to state 34
    BODY_STATEMENTS  go to state 54
    STATEMENTS_      go to state 37
    IF_              go to state 38
    IF_ELSE          go to state 39
    FOR_             go to state 40
    ASIGN_MENT       go to state 41
    FUNCTION_CALL    go to state 42


state 38

   26 STATEMENTS_: IF_ .
   31 IF_ELSE: IF_ . ELSE LEFTBRACE STATEMENTS_ RIGHTBRACE

    ELSE  shift, and go to state 55

    $default  reduce using rule 26 (STATEMENTS_)


state 39

   27 STATEMENTS_: IF_ELSE .

    $default  reduce using rule 27 (STATEMENTS_)


state 40

   28 STATEMENTS_: FOR_ .

    $default  reduce using rule 28 (STATEMENTS_)


state 41

   24 STATEMENTS_: ASIGN_MENT . SEMICOLON

    SEMICOLON  shift, and go to state 56


state 42

   25 STATEMENTS_: FUNCTION_CALL . SEMICOLON

    SEMICOLON  shift, and go to state 57


state 43

   21 MULT_DEC: COMMA . IDENTIFIER MULT_DEC
   22         | COMMA . INT_ARRAY MULT_DEC

    INTARRAY    shift, and go to state 31
    IDENTIFIER  shift, and go to state 58

    INT_ARRAY  go to state 59


state 44

   19 VAR_DECLERATIONS: VAR IDENTIFIER MULT_DEC . COLON TYPE SEMICOLON

    COLON  shift, and go to state 60


state 45

   30 IF_: IF LEFTPAREN . EXPR_ESSION RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 70
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 46

   32 FOR_: FOR LEFTPAREN . FOR_PARAMS RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE

    INTARRAY    shift, and go to state 31
    IDENTIFIER  shift, and go to state 73

    $default  reduce using rule 35 (FOR_ASIGN)

    INT_ARRAY   go to state 74
    FOR_PARAMS  go to state 75
    FOR_ASIGN   go to state 76
    ASIGN_MENT  go to state 77


state 47

   12 INT_ARRAY: INTARRAY LEFTBRACKET . INTEGER RIGHTBRACKET

    INTEGER  shift, and go to state 78


state 48

   52 INT_ARRAY: IDENTIFIER LEFTBRACKET . INTEGER RIGHTBRACKET

    INTEGER  shift, and go to state 79


state 49

   36 ASIGN_MENT: IDENTIFIER ASSIGNMENT . EXPR_ESSION
   67 FUNCTION_CALL: IDENTIFIER ASSIGNMENT . IDENTIFIER LEFTPAREN IN_PARAMS RIGHTPAREN

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 80
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 81
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 50

   15 BODY_CHOICE: F BODY_STATEMENTS .

    $default  reduce using rule 15 (BODY_CHOICE)


state 51

   37 ASIGN_MENT: INT_ARRAY ASSIGNMENT . EXPR_ESSION
   68 FUNCTION_CALL: INT_ARRAY ASSIGNMENT . IDENTIFIER LEFTPAREN IN_PARAMS RIGHTPAREN

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 82
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 83
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 52

   29 RETURN_: RETURN . EXPR_ESSION SEMICOLON

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 84
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 53

   14 B_O_F: VAR_DECLERATIONS BODY_CHOICE RETURN_ .

    $default  reduce using rule 14 (B_O_F)


state 54

   17 BODY_STATEMENTS: STATEMENTS_ BODY_STATEMENTS .

    $default  reduce using rule 17 (BODY_STATEMENTS)


state 55

   31 IF_ELSE: IF_ ELSE . LEFTBRACE STATEMENTS_ RIGHTBRACE

    LEFTBRACE  shift, and go to state 85


state 56

   24 STATEMENTS_: ASIGN_MENT SEMICOLON .

    $default  reduce using rule 24 (STATEMENTS_)


state 57

   25 STATEMENTS_: FUNCTION_CALL SEMICOLON .

    $default  reduce using rule 25 (STATEMENTS_)


state 58

   21 MULT_DEC: COMMA IDENTIFIER . MULT_DEC
   52 INT_ARRAY: IDENTIFIER . LEFTBRACKET INTEGER RIGHTBRACKET

    COMMA        shift, and go to state 43
    LEFTBRACKET  shift, and go to state 48

    $default  reduce using rule 23 (MULT_DEC)

    MULT_DEC  go to state 86


state 59

   22 MULT_DEC: COMMA INT_ARRAY . MULT_DEC

    COMMA  shift, and go to state 43

    $default  reduce using rule 23 (MULT_DEC)

    MULT_DEC  go to state 87


state 60

   19 VAR_DECLERATIONS: VAR IDENTIFIER MULT_DEC COLON . TYPE SEMICOLON

    BOOL  shift, and go to state 14
    INT   shift, and go to state 15

    TYPE  go to state 88


state 61

   45 SINGLE_EXPRESSION: NOT . TRUE
   47                  | NOT . FALSE

    TRUE   shift, and go to state 89
    FALSE  shift, and go to state 90


state 62

   40 SINGLE_EXPRESSION: MINUS . INTEGER

    INTEGER  shift, and go to state 91


state 63

   44 SINGLE_EXPRESSION: TRUE .

    $default  reduce using rule 44 (SINGLE_EXPRESSION)


state 64

   46 SINGLE_EXPRESSION: FALSE .

    $default  reduce using rule 46 (SINGLE_EXPRESSION)


state 65

   48 SINGLE_EXPRESSION: IDENTIFIER .
   52 INT_ARRAY: IDENTIFIER . LEFTBRACKET INTEGER RIGHTBRACKET

    LEFTBRACKET  shift, and go to state 48

    $default  reduce using rule 48 (SINGLE_EXPRESSION)


state 66

   42 SINGLE_EXPRESSION: INTEGER .

    $default  reduce using rule 42 (SINGLE_EXPRESSION)


state 67

   41 SINGLE_EXPRESSION: ABSOLUTEVALUE . MINUS INTEGER ABSOLUTEVALUE
   43                  | ABSOLUTEVALUE . INTEGER ABSOLUTEVALUE
   49                  | ABSOLUTEVALUE . IDENTIFIER ABSOLUTEVALUE
   51                  | ABSOLUTEVALUE . INT_ARRAY ABSOLUTEVALUE

    INTARRAY    shift, and go to state 31
    MINUS       shift, and go to state 92
    IDENTIFIER  shift, and go to state 93
    INTEGER     shift, and go to state 94

    INT_ARRAY  go to state 95


state 68

   39 EXPR_ESSION: LEFTPAREN . MULT_EXPRESSION RIGHTPAREN

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67

    INT_ARRAY          go to state 69
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 96


state 69

   50 SINGLE_EXPRESSION: INT_ARRAY .

    $default  reduce using rule 50 (SINGLE_EXPRESSION)


state 70

   30 IF_: IF LEFTPAREN EXPR_ESSION . RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE

    RIGHTPAREN  shift, and go to state 97


state 71

   53 MULT_EXPRESSION: SINGLE_EXPRESSION . OPE_RATOR

    EQEQ    shift, and go to state 98
    GT      shift, and go to state 99
    GTE     shift, and go to state 100
    LT      shift, and go to state 101
    LTE     shift, and go to state 102
    NE      shift, and go to state 103
    ANDAND  shift, and go to state 104
    OROR    shift, and go to state 105
    PLUS    shift, and go to state 106
    MINUS   shift, and go to state 107
    TIMES   shift, and go to state 108
    DIVIDE  shift, and go to state 109

    $default  reduce using rule 54 (OPE_RATOR)

    OPE_RATOR  go to state 110


state 72

   38 EXPR_ESSION: MULT_EXPRESSION .

    $default  reduce using rule 38 (EXPR_ESSION)


state 73

   36 ASIGN_MENT: IDENTIFIER . ASSIGNMENT EXPR_ESSION
   52 INT_ARRAY: IDENTIFIER . LEFTBRACKET INTEGER RIGHTBRACKET

    LEFTBRACKET  shift, and go to state 48
    ASSIGNMENT   shift, and go to state 111


state 74

   37 ASIGN_MENT: INT_ARRAY . ASSIGNMENT EXPR_ESSION

    ASSIGNMENT  shift, and go to state 112


state 75

   32 FOR_: FOR LEFTPAREN FOR_PARAMS . RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE

    RIGHTPAREN  shift, and go to state 113


state 76

   33 FOR_PARAMS: FOR_ASIGN . LEFTPAREN EXPR_ESSION RIGHTPAREN FOR_ASIGN

    LEFTPAREN  shift, and go to state 114


state 77

   34 FOR_ASIGN: ASIGN_MENT .

    $default  reduce using rule 34 (FOR_ASIGN)


state 78

   12 INT_ARRAY: INTARRAY LEFTBRACKET INTEGER . RIGHTBRACKET

    RIGHTBRACKET  shift, and go to state 115


state 79

   52 INT_ARRAY: IDENTIFIER LEFTBRACKET INTEGER . RIGHTBRACKET

    RIGHTBRACKET  shift, and go to state 116


state 80

   48 SINGLE_EXPRESSION: IDENTIFIER .
   52 INT_ARRAY: IDENTIFIER . LEFTBRACKET INTEGER RIGHTBRACKET
   67 FUNCTION_CALL: IDENTIFIER ASSIGNMENT IDENTIFIER . LEFTPAREN IN_PARAMS RIGHTPAREN

    LEFTPAREN    shift, and go to state 117
    LEFTBRACKET  shift, and go to state 48

    $default  reduce using rule 48 (SINGLE_EXPRESSION)


state 81

   36 ASIGN_MENT: IDENTIFIER ASSIGNMENT EXPR_ESSION .

    $default  reduce using rule 36 (ASIGN_MENT)


state 82

   48 SINGLE_EXPRESSION: IDENTIFIER .
   52 INT_ARRAY: IDENTIFIER . LEFTBRACKET INTEGER RIGHTBRACKET
   68 FUNCTION_CALL: INT_ARRAY ASSIGNMENT IDENTIFIER . LEFTPAREN IN_PARAMS RIGHTPAREN

    LEFTPAREN    shift, and go to state 118
    LEFTBRACKET  shift, and go to state 48

    $default  reduce using rule 48 (SINGLE_EXPRESSION)


state 83

   37 ASIGN_MENT: INT_ARRAY ASSIGNMENT EXPR_ESSION .

    $default  reduce using rule 37 (ASIGN_MENT)


state 84

   29 RETURN_: RETURN EXPR_ESSION . SEMICOLON

    SEMICOLON  shift, and go to state 119


state 85

   31 IF_ELSE: IF_ ELSE LEFTBRACE . STATEMENTS_ RIGHTBRACE

    IF          shift, and go to state 29
    FOR         shift, and go to state 30
    INTARRAY    shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    INT_ARRAY      go to state 34
    STATEMENTS_    go to state 120
    IF_            go to state 38
    IF_ELSE        go to state 39
    FOR_           go to state 40
    ASIGN_MENT     go to state 41
    FUNCTION_CALL  go to state 42


state 86

   21 MULT_DEC: COMMA IDENTIFIER MULT_DEC .

    $default  reduce using rule 21 (MULT_DEC)


state 87

   22 MULT_DEC: COMMA INT_ARRAY MULT_DEC .

    $default  reduce using rule 22 (MULT_DEC)


state 88

   19 VAR_DECLERATIONS: VAR IDENTIFIER MULT_DEC COLON TYPE . SEMICOLON

    SEMICOLON  shift, and go to state 121


state 89

   45 SINGLE_EXPRESSION: NOT TRUE .

    $default  reduce using rule 45 (SINGLE_EXPRESSION)


state 90

   47 SINGLE_EXPRESSION: NOT FALSE .

    $default  reduce using rule 47 (SINGLE_EXPRESSION)


state 91

   40 SINGLE_EXPRESSION: MINUS INTEGER .

    $default  reduce using rule 40 (SINGLE_EXPRESSION)


state 92

   41 SINGLE_EXPRESSION: ABSOLUTEVALUE MINUS . INTEGER ABSOLUTEVALUE

    INTEGER  shift, and go to state 122


state 93

   49 SINGLE_EXPRESSION: ABSOLUTEVALUE IDENTIFIER . ABSOLUTEVALUE
   52 INT_ARRAY: IDENTIFIER . LEFTBRACKET INTEGER RIGHTBRACKET

    ABSOLUTEVALUE  shift, and go to state 123
    LEFTBRACKET    shift, and go to state 48


state 94

   43 SINGLE_EXPRESSION: ABSOLUTEVALUE INTEGER . ABSOLUTEVALUE

    ABSOLUTEVALUE  shift, and go to state 124


state 95

   51 SINGLE_EXPRESSION: ABSOLUTEVALUE INT_ARRAY . ABSOLUTEVALUE

    ABSOLUTEVALUE  shift, and go to state 125


state 96

   39 EXPR_ESSION: LEFTPAREN MULT_EXPRESSION . RIGHTPAREN

    RIGHTPAREN  shift, and go to state 126


state 97

   30 IF_: IF LEFTPAREN EXPR_ESSION RIGHTPAREN . LEFTBRACE STATEMENTS_ RIGHTBRACE

    LEFTBRACE  shift, and go to state 127


state 98

   61 OPE_RATOR: EQEQ . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 128
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 99

   62 OPE_RATOR: GT . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 129
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 100

   63 OPE_RATOR: GTE . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 130
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 101

   64 OPE_RATOR: LT . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 131
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 102

   65 OPE_RATOR: LTE . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 132
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 103

   66 OPE_RATOR: NE . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 133
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 104

   60 OPE_RATOR: ANDAND . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 134
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 105

   59 OPE_RATOR: OROR . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 135
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 106

   55 OPE_RATOR: PLUS . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 136
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 107

   56 OPE_RATOR: MINUS . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 137
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 108

   57 OPE_RATOR: TIMES . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 138
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 109

   58 OPE_RATOR: DIVIDE . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 139
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 110

   53 MULT_EXPRESSION: SINGLE_EXPRESSION OPE_RATOR .

    $default  reduce using rule 53 (MULT_EXPRESSION)


state 111

   36 ASIGN_MENT: IDENTIFIER ASSIGNMENT . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 81
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 112

   37 ASIGN_MENT: INT_ARRAY ASSIGNMENT . EXPR_ESSION

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 83
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 113

   32 FOR_: FOR LEFTPAREN FOR_PARAMS RIGHTPAREN . LEFTBRACE STATEMENTS_ RIGHTBRACE

    LEFTBRACE  shift, and go to state 140


state 114

   33 FOR_PARAMS: FOR_ASIGN LEFTPAREN . EXPR_ESSION RIGHTPAREN FOR_ASIGN

    INTARRAY       shift, and go to state 31
    NOT            shift, and go to state 61
    MINUS          shift, and go to state 62
    TRUE           shift, and go to state 63
    FALSE          shift, and go to state 64
    IDENTIFIER     shift, and go to state 65
    INTEGER        shift, and go to state 66
    ABSOLUTEVALUE  shift, and go to state 67
    LEFTPAREN      shift, and go to state 68

    INT_ARRAY          go to state 69
    EXPR_ESSION        go to state 141
    SINGLE_EXPRESSION  go to state 71
    MULT_EXPRESSION    go to state 72


state 115

   12 INT_ARRAY: INTARRAY LEFTBRACKET INTEGER RIGHTBRACKET .

    $default  reduce using rule 12 (INT_ARRAY)


state 116

   52 INT_ARRAY: IDENTIFIER LEFTBRACKET INTEGER RIGHTBRACKET .

    $default  reduce using rule 52 (INT_ARRAY)


state 117

   67 FUNCTION_CALL: IDENTIFIER ASSIGNMENT IDENTIFIER LEFTPAREN . IN_PARAMS RIGHTPAREN

    NOT      shift, and go to state 142
    MINUS    shift, and go to state 143
    TRUE     shift, and go to state 144
    FALSE    shift, and go to state 145
    INTEGER  shift, and go to state 146
    COMMA    shift, and go to state 147

    $default  reduce using rule 77 (NEXT_PARAM)

    IN_PARAMS   go to state 148
    NEXT_PARAM  go to state 149


state 118

   68 FUNCTION_CALL: INT_ARRAY ASSIGNMENT IDENTIFIER LEFTPAREN . IN_PARAMS RIGHTPAREN

    NOT      shift, and go to state 142
    MINUS    shift, and go to state 143
    TRUE     shift, and go to state 144
    FALSE    shift, and go to state 145
    INTEGER  shift, and go to state 146
    COMMA    shift, and go to state 147

    $default  reduce using rule 77 (NEXT_PARAM)

    IN_PARAMS   go to state 150
    NEXT_PARAM  go to state 149


state 119

   29 RETURN_: RETURN EXPR_ESSION SEMICOLON .

    $default  reduce using rule 29 (RETURN_)


state 120

   31 IF_ELSE: IF_ ELSE LEFTBRACE STATEMENTS_ . RIGHTBRACE

    RIGHTBRACE  shift, and go to state 151


state 121

   19 VAR_DECLERATIONS: VAR IDENTIFIER MULT_DEC COLON TYPE SEMICOLON .

    $default  reduce using rule 19 (VAR_DECLERATIONS)


state 122

   41 SINGLE_EXPRESSION: ABSOLUTEVALUE MINUS INTEGER . ABSOLUTEVALUE

    ABSOLUTEVALUE  shift, and go to state 152


state 123

   49 SINGLE_EXPRESSION: ABSOLUTEVALUE IDENTIFIER ABSOLUTEVALUE .

    $default  reduce using rule 49 (SINGLE_EXPRESSION)


state 124

   43 SINGLE_EXPRESSION: ABSOLUTEVALUE INTEGER ABSOLUTEVALUE .

    $default  reduce using rule 43 (SINGLE_EXPRESSION)


state 125

   51 SINGLE_EXPRESSION: ABSOLUTEVALUE INT_ARRAY ABSOLUTEVALUE .

    $default  reduce using rule 51 (SINGLE_EXPRESSION)


state 126

   39 EXPR_ESSION: LEFTPAREN MULT_EXPRESSION RIGHTPAREN .

    $default  reduce using rule 39 (EXPR_ESSION)


state 127

   30 IF_: IF LEFTPAREN EXPR_ESSION RIGHTPAREN LEFTBRACE . STATEMENTS_ RIGHTBRACE

    IF          shift, and go to state 29
    FOR         shift, and go to state 30
    INTARRAY    shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    INT_ARRAY      go to state 34
    STATEMENTS_    go to state 153
    IF_            go to state 38
    IF_ELSE        go to state 39
    FOR_           go to state 40
    ASIGN_MENT     go to state 41
    FUNCTION_CALL  go to state 42


state 128

   61 OPE_RATOR: EQEQ EXPR_ESSION .

    $default  reduce using rule 61 (OPE_RATOR)


state 129

   62 OPE_RATOR: GT EXPR_ESSION .

    $default  reduce using rule 62 (OPE_RATOR)


state 130

   63 OPE_RATOR: GTE EXPR_ESSION .

    $default  reduce using rule 63 (OPE_RATOR)


state 131

   64 OPE_RATOR: LT EXPR_ESSION .

    $default  reduce using rule 64 (OPE_RATOR)


state 132

   65 OPE_RATOR: LTE EXPR_ESSION .

    $default  reduce using rule 65 (OPE_RATOR)


state 133

   66 OPE_RATOR: NE EXPR_ESSION .

    $default  reduce using rule 66 (OPE_RATOR)


state 134

   60 OPE_RATOR: ANDAND EXPR_ESSION .

    $default  reduce using rule 60 (OPE_RATOR)


state 135

   59 OPE_RATOR: OROR EXPR_ESSION .

    $default  reduce using rule 59 (OPE_RATOR)


state 136

   55 OPE_RATOR: PLUS EXPR_ESSION .

    $default  reduce using rule 55 (OPE_RATOR)


state 137

   56 OPE_RATOR: MINUS EXPR_ESSION .

    $default  reduce using rule 56 (OPE_RATOR)


state 138

   57 OPE_RATOR: TIMES EXPR_ESSION .

    $default  reduce using rule 57 (OPE_RATOR)


state 139

   58 OPE_RATOR: DIVIDE EXPR_ESSION .

    $default  reduce using rule 58 (OPE_RATOR)


state 140

   32 FOR_: FOR LEFTPAREN FOR_PARAMS RIGHTPAREN LEFTBRACE . STATEMENTS_ RIGHTBRACE

    IF          shift, and go to state 29
    FOR         shift, and go to state 30
    INTARRAY    shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    INT_ARRAY      go to state 34
    STATEMENTS_    go to state 154
    IF_            go to state 38
    IF_ELSE        go to state 39
    FOR_           go to state 40
    ASIGN_MENT     go to state 41
    FUNCTION_CALL  go to state 42


state 141

   33 FOR_PARAMS: FOR_ASIGN LEFTPAREN EXPR_ESSION . RIGHTPAREN FOR_ASIGN

    RIGHTPAREN  shift, and go to state 155


state 142

   72 IN_PARAMS: NOT . TRUE NEXT_PARAM
   74          | NOT . FALSE NEXT_PARAM

    TRUE   shift, and go to state 156
    FALSE  shift, and go to state 157


state 143

   69 IN_PARAMS: MINUS . INTEGER NEXT_PARAM

    INTEGER  shift, and go to state 158


state 144

   71 IN_PARAMS: TRUE . NEXT_PARAM

    COMMA  shift, and go to state 147

    $default  reduce using rule 77 (NEXT_PARAM)

    NEXT_PARAM  go to state 159


state 145

   73 IN_PARAMS: FALSE . NEXT_PARAM

    COMMA  shift, and go to state 147

    $default  reduce using rule 77 (NEXT_PARAM)

    NEXT_PARAM  go to state 160


state 146

   70 IN_PARAMS: INTEGER . NEXT_PARAM

    COMMA  shift, and go to state 147

    $default  reduce using rule 77 (NEXT_PARAM)

    NEXT_PARAM  go to state 161


state 147

   76 NEXT_PARAM: COMMA . IN_PARAMS

    NOT      shift, and go to state 142
    MINUS    shift, and go to state 143
    TRUE     shift, and go to state 144
    FALSE    shift, and go to state 145
    INTEGER  shift, and go to state 146
    COMMA    shift, and go to state 147

    $default  reduce using rule 77 (NEXT_PARAM)

    IN_PARAMS   go to state 162
    NEXT_PARAM  go to state 149


state 148

   67 FUNCTION_CALL: IDENTIFIER ASSIGNMENT IDENTIFIER LEFTPAREN IN_PARAMS . RIGHTPAREN

    RIGHTPAREN  shift, and go to state 163


state 149

   75 IN_PARAMS: NEXT_PARAM .

    $default  reduce using rule 75 (IN_PARAMS)


state 150

   68 FUNCTION_CALL: INT_ARRAY ASSIGNMENT IDENTIFIER LEFTPAREN IN_PARAMS . RIGHTPAREN

    RIGHTPAREN  shift, and go to state 164


state 151

   31 IF_ELSE: IF_ ELSE LEFTBRACE STATEMENTS_ RIGHTBRACE .

    $default  reduce using rule 31 (IF_ELSE)


state 152

   41 SINGLE_EXPRESSION: ABSOLUTEVALUE MINUS INTEGER ABSOLUTEVALUE .

    $default  reduce using rule 41 (SINGLE_EXPRESSION)


state 153

   30 IF_: IF LEFTPAREN EXPR_ESSION RIGHTPAREN LEFTBRACE STATEMENTS_ . RIGHTBRACE

    RIGHTBRACE  shift, and go to state 165


state 154

   32 FOR_: FOR LEFTPAREN FOR_PARAMS RIGHTPAREN LEFTBRACE STATEMENTS_ . RIGHTBRACE

    RIGHTBRACE  shift, and go to state 166


state 155

   33 FOR_PARAMS: FOR_ASIGN LEFTPAREN EXPR_ESSION RIGHTPAREN . FOR_ASIGN

    INTARRAY    shift, and go to state 31
    IDENTIFIER  shift, and go to state 73

    $default  reduce using rule 35 (FOR_ASIGN)

    INT_ARRAY   go to state 74
    FOR_ASIGN   go to state 167
    ASIGN_MENT  go to state 77


state 156

   72 IN_PARAMS: NOT TRUE . NEXT_PARAM

    COMMA  shift, and go to state 147

    $default  reduce using rule 77 (NEXT_PARAM)

    NEXT_PARAM  go to state 168


state 157

   74 IN_PARAMS: NOT FALSE . NEXT_PARAM

    COMMA  shift, and go to state 147

    $default  reduce using rule 77 (NEXT_PARAM)

    NEXT_PARAM  go to state 169


state 158

   69 IN_PARAMS: MINUS INTEGER . NEXT_PARAM

    COMMA  shift, and go to state 147

    $default  reduce using rule 77 (NEXT_PARAM)

    NEXT_PARAM  go to state 170


state 159

   71 IN_PARAMS: TRUE NEXT_PARAM .

    $default  reduce using rule 71 (IN_PARAMS)


state 160

   73 IN_PARAMS: FALSE NEXT_PARAM .

    $default  reduce using rule 73 (IN_PARAMS)


state 161

   70 IN_PARAMS: INTEGER NEXT_PARAM .

    $default  reduce using rule 70 (IN_PARAMS)


state 162

   76 NEXT_PARAM: COMMA IN_PARAMS .

    $default  reduce using rule 76 (NEXT_PARAM)


state 163

   67 FUNCTION_CALL: IDENTIFIER ASSIGNMENT IDENTIFIER LEFTPAREN IN_PARAMS RIGHTPAREN .

    $default  reduce using rule 67 (FUNCTION_CALL)


state 164

   68 FUNCTION_CALL: INT_ARRAY ASSIGNMENT IDENTIFIER LEFTPAREN IN_PARAMS RIGHTPAREN .

    $default  reduce using rule 68 (FUNCTION_CALL)


state 165

   30 IF_: IF LEFTPAREN EXPR_ESSION RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE .

    $default  reduce using rule 30 (IF_)


state 166

   32 FOR_: FOR LEFTPAREN FOR_PARAMS RIGHTPAREN LEFTBRACE STATEMENTS_ RIGHTBRACE .

    $default  reduce using rule 32 (FOR_)


state 167

   33 FOR_PARAMS: FOR_ASIGN LEFTPAREN EXPR_ESSION RIGHTPAREN FOR_ASIGN .

    $default  reduce using rule 33 (FOR_PARAMS)


state 168

   72 IN_PARAMS: NOT TRUE NEXT_PARAM .

    $default  reduce using rule 72 (IN_PARAMS)


state 169

   74 IN_PARAMS: NOT FALSE NEXT_PARAM .

    $default  reduce using rule 74 (IN_PARAMS)


state 170

   69 IN_PARAMS: MINUS INTEGER NEXT_PARAM .

    $default  reduce using rule 69 (IN_PARAMS)
