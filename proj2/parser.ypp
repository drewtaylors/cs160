%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <iostream>
	#define YYDEBUG 1

	int yylex(void);
	void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

/* WRITE ME: put all your token definitions here*/
/* WRITE ME: put all your type definitions here*/
/* WRITE ME: put all your precedence/associativity rules here*/


%token BOOL
%token ELSE
%token IF
%token INT
%token FOR
%token VAR
%token FUNCTION
%token INTARRAY
%token RETURN

%token EQEQ
%token GT
%token GTE
%token LT
%token LTE
%token NE
%token ANDAND
%token OROR
%token NOT
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE

%token TRUE
%token FALSE

%token IDENTIFIER

%token SEMICOLON
%token COLON
%token COMMA
%token ABSOLUTEVALUE
%token LEFTBRACE
%token RIGHTBRACE
%token LEFTPAREN
%token RIGHTPAREN
%token LEFTBRACKET
%token RIGHTBRACKET
%token ASSIGNMENT


%%

/* WRITE ME: This is the language from Project 1 (Calculator). You need
			 to put the productions for the grammar for the
			 language for this project here*/
			 
List    : List Expr ',' {/*Your c code goes here!!!*/}
	| Expr ','      {/*Your C code goes here!!!*/}
        ;

Expr    : Expr '*' Expr
        | Expr '+' Expr 
        | Expr '-' Expr
        | Expr '/' Expr
        | 'n'
        | '(' Expr ')'
        ;
%%

/*You shouldn't have to do anything past this*/

extern int yylineno;

void yyerror(const char *s) {
	fprintf(stderr, "%s at line %d\n", s, yylineno);
	exit(0);
}
